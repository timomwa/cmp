package com.inmobia.celcom.serviceprocessors.sms;

import java.sql.Connection;
import java.util.Map;

import org.apache.log4j.Logger;

import snaq.db.DBPoolDataSource;

import com.inmobia.axiata.connections.DriverUtilities;
import com.inmobia.axiata.web.beans.RequestObject;
import com.inmobia.axiata.web.triviaI.MechanicsI;
import com.inmobia.celcom.api.GenericServiceProcessor;
import com.inmobia.celcom.entities.MOSms;
import com.inmobia.celcom.staticcontent.ContentRetriever;
import com.inmobia.celcom.subscription.Subscription;
import com.inmobia.celcom.subscription.dto.SubscriptionDTO;
import com.inmobia.celcom.subscription.dto.SubscriptionStatus;
import com.inmobia.celcom.util.UtilCelcom;

public class DynamicContentProcessor extends GenericServiceProcessor{

	private final Logger dynamic_content_processorLogger = Logger.getLogger(DynamicContentProcessor.class);
	private DBPoolDataSource ds;
	private Subscription subscription;
	
	private ContentRetriever cr = new ContentRetriever();
	private String SPACE = " ";
	
	public DynamicContentProcessor(){
		init_datasource();
		subscription = new Subscription();
	}
	
	private void init_datasource(){
		
		int vendor = DriverUtilities.MYSQL;
		String driver = DriverUtilities.getDriver(vendor);
		String host = "db";
		String dbName = MechanicsI.DATABASE;
		String url = DriverUtilities.makeURL(host, dbName, vendor);
		
		ds = new DBPoolDataSource();
	    ds.setName("DYNAMICCONTENT_PROCESSOR_DS");
	    ds.setDescription("DYNAMIC Content thread datasource: "+ds.getName());
	    ds.setDriverClassName(driver);
	    ds.setUrl(url);
	    ds.setUser("root");
	    ds.setPassword("");
	    ds.setMinPool(1);
	    ds.setMaxPool(2);
	    ds.setMaxSize(3);
	    ds.setIdleTimeout(3600);  // Specified in seconds.
	    ds.setValidationQuery("SELECT 'Test'");
		
	}

	@Override
	public MOSms process(MOSms mo){
		
		Connection conn = null;
		
		try {
			
			conn = getCon();
			
			final RequestObject req = new RequestObject(mo);
			final String KEYWORD = req.getKeyword().trim();
			final String MSISDN = req.getMsisdn();
			final int serviceid = mo.getServiceid();
			final Map<String,String> additionalInfo = UtilCelcom.getAdditionalServiceInfo(serviceid,conn);
			final int content_id = Integer.valueOf(UtilCelcom.getServiceMetaData(conn,serviceid,"dynamic_contentid"));
			
			dynamic_content_processorLogger.info("KEYWORD ::::::::::::::::::::::::: ["+KEYWORD+"]");
			dynamic_content_processorLogger.info("SERVICEID ::::::::::::::::::::::::: ["+serviceid+"]");
			
			String tailMsg = "";
			
			if(!mo.isSubscriptionPush()){//If this is a subscription push, then don't check if sub is subscribed.
				
				SubscriptionDTO sub = subscription.getSubscriptionDTO(conn, MSISDN, serviceid);
				
				tailMsg = (sub==null ? additionalInfo.get("tailText_notsubscribed") : (SubscriptionStatus.confirmed==SubscriptionStatus.get(sub.getSubscription_status()) ? additionalInfo.get("tailText_subscribed") : additionalInfo.get("tailText_notsubscribed")));
						 
				if(tailMsg==null || tailMsg.equals(additionalInfo.get("tailText_notsubscribed"))){
					subscription.subscribe(conn, MSISDN, serviceid, -1);
				}
				
			}else{
				
				tailMsg = additionalInfo.get("tailText_subscribed");
			
			}
			
			final String content = cr.getDynamicContent(content_id, conn);
					
			if(content!=null)
				mo.setMt_Sent(RM.replaceAll(PRICE_TG, String.valueOf(mo.getPrice()))+content+SPACE+tailMsg);
			else
				mo.setMt_Sent(RM.replaceAll(PRICE_TG, String.valueOf(mo.getPrice()))+"Dummy subscription content for "+additionalInfo.get("service_name")+SPACE+".");//No content! Send blank msg.
					
			dynamic_content_processorLogger.info("CONTENT FOR MSISDN["+MSISDN+"] ::::::::::::::::::::::::: ["+mo.toString()+"]");
			
		}catch(Exception e){
			
			dynamic_content_processorLogger.error(e.getMessage(),e);
		
		}finally{
			
			try{
				conn.close();
			}catch(Exception e){}
		
		}
		
		return mo;
	}

	@Override
	public void finalizeMe() {

		try {
			
			ds.releaseConnectionPool();
			
		
		} catch (Exception e) {
			
			dynamic_content_processorLogger.error(e.getMessage(),e);
			
		}
		
	}

	@Override
	public Connection getCon() {
		
		try {
			
			return ds.getConnection();
		
		} catch (Exception e) {
			
			dynamic_content_processorLogger.error(e.getMessage(),e);
			
			return null;
		
		}finally{
		
		}
	}
	

}
