package com.inmobia.celcom.api;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import java.util.concurrent.BlockingDeque;
import java.util.concurrent.LinkedBlockingDeque;

import org.apache.log4j.Logger;

import com.inmobia.celcom.api.Settings;
import com.inmobia.celcom.entities.MOSms;
import com.inmobia.mms.api.TarrifCode;

/**
 * @author Timothy Mwangi Gikonyo.
 *
 */
public abstract class GenericServiceProcessor implements ServiceProcessorI {
	
	public static final String SPACE = " ";
	public static final String NEW_LINE = "\n";
	public static final String SERVICENAME_TAG = "<SERVICE_NAME>";
	public static final String PRICE_TAG = "<SMS_SUBSCRIPTION_PRICE>";
	public static final String KEYWORD_TAG = "<KEYWORD>";
	public static final String CONFIRMED_SUBSCRIPTION_ADVICE = "CONFIRMED_SUBSCRIPTION_ADVICE";
	public static final String SUBSCRIPTION_CONFIRMATION_ADVICE = "SUBSCRIPTION_CONFIRMATION_ADVICE";
	public static final String MAIN_MENU_ADVICE = "MAIN_MENU_ADVICE";
	public static final String NO_PENDING_SUBSCRIPTION_ADVICE = "NO_PENDING_SUBSCRIPTION_ADVICE";
	public static final String UNSUBSCRIBED_ALL_ADVICE = "UNSUBSCRIBED_ALL_ADVICE";
	public static final String UNKNOWN_KEYWORD_ADVICE = "UNKNOWN_KEYWORD_ADVICE";
	public static final String UNSUBSCRIBED_SINGLE_SERVICE_ADVICE = "UNSUBSCRIBED_SINGLE_SERVICE_ADVICE";
	public static final String RM = "RM<PRICE>\n";
	public static final String PRICE_TG = "<PRICE>";
	public static final String CHOSEN = "<CHOSEN>";
	//private static final String COLON = ":";
	public static final String SUBSCRIPTION_CONFIRMATION = "ON";
	public static final String SUBSCRIPTION_ADVICE = "SUBSCRIPTION_ADVICE";

	private static final String ACK_SQL = "UPDATE `"+CelcomImpl.DATABASE+"`.`messagelog` SET mo_ack=1 WHERE id=?";

	private static final String SEND_MT_1 = "insert into `"+CelcomImpl.DATABASE+"`.`httptosend`" +
				"(SMS,MSISDN,SendFrom,fromAddr,CMP_AKeyword,CMP_SKeyword,Priority,CMP_TxID,split,serviceid,price,SMS_DataCodingId,mo_processorFK) " +
				"VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?) ON DUPLICATE KEY UPDATE re_tries=re_tries+1";

	private static final String SEND_MT_2 = "insert into `"+CelcomImpl.DATABASE+"`.`httptosend`" +
				"(SMS,MSISDN,SendFrom,fromAddr,CMP_AKeyword,CMP_SKeyword,Priority,split,serviceid,price,SMS_DataCodingId,mo_processorFK) " +
				"VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?) ON DUPLICATE KEY UPDATE re_tries=re_tries+1";

	private static final String TO_STATS_LOG = "INSERT INTO `celcom`.`SMSStatLog`(SMSServiceID,msisdn,transactionID, CMP_Keyword, CMP_SKeyword, price, subscription) " +
						"VALUES(?,?,?,?,?,?,?)";


	public void initQueue(int size){
		this.max_queue_size = size;
		
		if(this.max_queue_size>0)
			moMsgs = new LinkedBlockingDeque<MOSms>(this.max_queue_size);
		else
			moMsgs = new LinkedBlockingDeque<MOSms>();
		
		
	}
	
	protected Logger logger = Logger.getLogger(getClass());//check this
	
	/**
	 * internal message queue
	 */
	private volatile BlockingDeque<MOSms> moMsgs = null;
	
	
	protected boolean run = true;
	protected boolean finished = false;
	public String name;
	protected boolean busy = false;
	protected int max_queue_size = -1;
	
	
	
	
	/* (non-Javadoc)
	 * @see com.inmobia.celcom.api.ServiceProcessorI#enqueue(com.inmobia.celcom.entities.MOSms)
	 */
	public boolean submit(MOSms mo_){
		boolean success = false;
		try{
			success =  this.moMsgs.offerLast(mo_);
		}catch(Exception e){
			this.logger.error(e.getMessage(),e);
		}
		return success;
	}
	
	
	/**
	 * Gets the internal queue size.
	 */
	public int getQueueSize(){
		return this.moMsgs.size();
	}
	
	
	public boolean isBusy() {
		return busy;
	}

	private synchronized void setBusy(boolean busy) {
		this.busy = busy;
		notify();
	}
	

	public boolean isFinished() {
		return finished;
	}

	private void setFinished(boolean finished) {
		this.finished = finished;
	}
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public boolean isRunning() {
		return run;
	}

	public void setRun(boolean run) {
		this.run = run;
	}
	
	public synchronized void rezume(){
		this.notify();
	}
	
	public synchronized void pauze(){
		try {
			
			this.wait();
		
		} catch (InterruptedException e) {
			
			logger.debug(getName()+" we now run!");
		
		}
	}
	
	
	
	
	
	
	
	/**
	 * Determines whether the queue is full.
	 * @return true if the unprocessed queue size is equal to
	 * the size of the queue
	 */
	public boolean queueFull(){
		
		logger.info("max_queue_size:: "+max_queue_size);
		if(max_queue_size==-1)
			return false;
		if(max_queue_size==moMsgs.size())
			return true;
		else
			return false;
	}
	
	public GenericServiceProcessor(){
		
	}
	
	public static Vector<String> splitText(String input){
  		int maxSize = 156;
		Vector<String> ret=new Vector<String>();
  		
  		while(true){
  			input=input.trim();
  			if (input.length()<=maxSize){
  				ret.add(input);
  				break;
  			}
  			int pos=maxSize;
  			
            while(input.charAt(pos)!=' ' && input.charAt(pos)!='\n')
  				pos--;
  			String tmp=input.substring(0,pos);
  			ret.add(tmp);
  			input=input.substring(pos);
  			
  		}
  		return ret;
  }
	
	
	
	protected void toStatsLog(MOSms mo, Connection conn) {
		
		PreparedStatement pstmt = null;
		
		try {
			
				
			pstmt = conn.prepareStatement(TO_STATS_LOG,Statement.RETURN_GENERATED_KEYS);
			
			pstmt.setInt(1, mo.getServiceid());
			pstmt.setString(2, mo.getSUB_Mobtel());
			pstmt.setString(3, mo.getCMP_Txid());
			pstmt.setString(4, mo.getCMP_AKeyword());
			pstmt.setString(5, mo.getCMP_SKeyword());
			if(mo.getCMP_SKeyword().equals(TarrifCode.RM1.getCode()))
				pstmt.setDouble(6, 1d);
			else
				pstmt.setDouble(6, mo.getPrice());
			
			pstmt.setBoolean(7, mo.isSubscriptionPush());
			pstmt.executeUpdate();
			
		} catch (SQLException e) {
			
			log(e);
		
		} catch (Exception e) {
			
			log(e);
			
		}finally{
			
			try {
				
				if(pstmt!=null)
					pstmt.close();
				
			} catch (SQLException e) {
				
				log(e);
				
			}
		}
		
	}
	
	private void log(Exception e) {
		logger.error(e.getMessage(),e);
	}

	public String generateNextTxId(){
		
		String timestamp = String.valueOf(System.currentTimeMillis());
		
		return Settings.INMOBIA.substring(0, (19-timestamp.length())) + timestamp;//(String.valueOf(Long.MAX_VALUE).length()-timestamp.length())) + timestamp;
		
	}
	
	
	
	@Override
	public void run() {

		try{
			
			initQueue(this.max_queue_size);
				
			while(run){
				
				try{
					
					final MOSms mo = this.moMsgs.takeFirst();//will block here while the queue is empty
					
					acknowledge(mo.getId());
					
					if(!mo.getCMP_Txid().equals("-1")){
						
						setBusy(true);//set to busy so that it's not picked from the pool.
					
						final MOSms mo_tmp = process(mo);//this will actually process the stuff.. uses the subclass to process..
						
						logger.debug("\n\n\n\n\n\n>>>>>>>>>>>>>>>> OUR MO >>>>>>>>>>>>>>>>> "+mo_tmp.toString()+"\n\n\n\n");
						
						sendMT(mo_tmp);
					
						setBusy(false);
					
					}else{
						logger.debug("got poison pill!");
						setRun(false);
					
					}
					
				}catch(Exception e){
					
					logger.error(e.getMessage(),e);
				
				}
			}
			
			setFinished(true);
			
			setBusy(false);
			
		}catch(OutOfMemoryError e){
			
			logger.error(e.getMessage(),e);
			
			//send alarm
		}finally{
			
			setFinished(true);
			
			setBusy(false);
			
			finalizeMe();
		
		}
		
		logger.debug(":::::::::::::::::: "+getName()+": terminated:");
		
		
	}
	
	/**
	 * Set the internal sms queue
	 */
	public void setInternalQueue(int i){
		this.max_queue_size = i;
	}
	
	
	
	/**
	 * Acknowledge that we've received this MO message and are going to process it.
	 * TODO - have this method in the generic supper class .. no need for all processors
	 * to implement it because the function is just the same no matter the kind
	 * of processor
	 */
	public boolean acknowledge(long message_log_id) {
		
		PreparedStatement pst = null;
		
		boolean success = false;
		
		Connection conn = null;
		
		try {
			
			conn = getCon();
			
			//if(conn==null)
				//System.out.println(" :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: conn is null");
			pst = conn.prepareStatement(ACK_SQL,Statement.RETURN_GENERATED_KEYS);
			
			pst.setString(1, String.valueOf(message_log_id));
			
			success = pst.executeUpdate()>0;
		
		} catch (SQLException e) {
			
			logger.error(e.getMessage(),e);
		
		}finally{
			
			try {
				
				if(pst!=null)
					pst.close();
			
			} catch (SQLException e) {
				
				logger.error(e.getMessage(),e);
			
			}
			
			try {
				
				if(conn!=null)
					conn.close();
			
			} catch (Exception e) {
				
				logger.error(e.getMessage(),e);
			
			}
		}
		
		return success;
	}
	
	
	
	
	/**
	 * Insert into http to send
	 * @param mo
	 */
	public void  sendMT(MOSms mo) {
		
		PreparedStatement pstmt = null;
		
		Connection conn = null;
		
		try {
			
			conn = getCon();
			
			if(conn==null)
				logger.error("Connection object is null!");
			
			if(!mo.getCMP_Txid().equals("-1")){
			
				pstmt = conn.prepareStatement(SEND_MT_1, Statement.RETURN_GENERATED_KEYS);
			
			}else{
				
				pstmt = conn.prepareStatement(SEND_MT_2, Statement.RETURN_GENERATED_KEYS);
			
			}
			
			pstmt.setString(1, mo.getMt_Sent());
			pstmt.setString(2, mo.getSUB_Mobtel());
			pstmt.setString(3, mo.getSMS_SourceAddr());
			pstmt.setString(4, mo.getSMS_SourceAddr());
			
			pstmt.setString(5, mo.getCMP_AKeyword());
			pstmt.setString(6, mo.getCMP_SKeyword());
			pstmt.setInt(7, mo.getPriority());
			
			if(!mo.getCMP_Txid().equals("-1")){
				pstmt.setString(8, String.valueOf(mo.getCMP_Txid()));
				//logger.debug("mo.getCMP_Txid():::: "+mo.getCMP_Txid()+" >>>>>>>>>MO OBJ: "+mo.toString());
			}
			pstmt.setInt(9, (mo.isSplit_msg() ? 1 : 0));
			pstmt.setInt(10, mo.getServiceid());
			pstmt.setString(11, String.valueOf(mo.getPrice()));
			pstmt.setString(12, mo.getSMS_DataCodingId());
			pstmt.setInt(13, mo.getProcessor_id());
			
			pstmt.executeUpdate();
		
		} catch (SQLException e) {
			
			logger.error(e.getMessage(),e);
			
		}finally{
			
			try {
				
				if(pstmt!=null)
					pstmt.close();
			
			} catch (SQLException e) {
				
				logger.error(e.getMessage(),e);
			
			}
			
			try {
				
				if(conn!=null)
					conn.close();
			
			} catch (SQLException e) {
				
				logger.error(e.getMessage(),e);
			
			}
			
			
		}
		
	}
	
	
	
}
